pour deployé  , je dois

1. faire l application prod . property
2. creer le jar avec mvn
3 - 4 (j ignore dans quel ordre) : creer le docket et mettre le projet sous git hub
5 . trouver un hebergeur (rendered par exemple) et le connecter au github
6. Etant donné que j utilise le Git hub gratuit , je prend l option docker , pour lire et executer mon projet
7. Les information sensible qui sont censé etre present dans l application . property ( mot de passe BDD , ...) je les mets dans les parametres de Rendered
8. je deploye


curl -X GET "http://localhost:8080/api/users/{1}" \
  -H "Content-Type: application/json"





# Dossiers de stockage (restent locaux)
#file.upload-dir=C:\\java\\Security02\\data\\photos
#file.playlist-dir=C:\\java\\Security02\\data\\playlist


# Server
server.port=8080

# Base de données H2 - Persistante
spring.datasource.url=jdbc:h2:file:C:/java/security02/data/neondb;MODE=PostgreSQL;AUTO_SERVER=TRUE
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=


# H2 Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA / Hibernate
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Logging
logging.level.root=INFO
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

# Upload fichiers
server.servlet.multipart.max-file-size=10MB
server.servlet.multipart.max-request-size=10MB

# JWT
jwt.secret=${JWT_SECRET:dev-secret-key-minimum-64-characters-long-for-testing-purposes}
jwt.access-expiration=900000
jwt.refresh-expiration=604800000